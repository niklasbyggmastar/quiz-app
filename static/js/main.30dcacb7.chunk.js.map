{"version":3,"sources":["components/Header.js","components/Question.js","components/AnswerBtn.js","components/AnswerBox.js","components/GameOver.js","App.js","serviceWorker.js","index.js"],"names":["Header","gameOver","className","Question","value","AnswerBtn","index","text","checkAnswer","correctAnswerIndex","showIndicator","disabledBtns","type","onClick","AnswerBox","options","map","val","i","key","GameOver","score","restart","App","props","state","qaList","myJson","question","correctAnswer","isCorrect","round","progress","bind","this","shuffleArray","getQuestion","console","log","answer","setState","Math","ceil","length","nextQuestion","setTimeout","document","activeElement","blur","opt","correct","array","j","floor","random","ProgressBar","now","label","variant","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.30dcacb7.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst Header = ({gameOver}) => {\r\n    return(\r\n        <h1 className=\"text-center mb-5\">\r\n            { gameOver === false ? \"Quiz App\" : \"Game over\" }\r\n        </h1>\r\n    )\r\n}\r\n\r\nexport default Header;","import React from \"react\";\r\n\r\nconst Question = ({value}) => {\r\n    return(\r\n        <h4 className=\"mb-4\">\r\n            {value}\r\n        </h4>\r\n    )\r\n}\r\n\r\nexport default Question;","import React from \"react\";\r\n\r\nconst AnswerBtn = ({ index, text, checkAnswer, correctAnswerIndex, showIndicator, disabledBtns }) => {\r\n    return (\r\n        <button \r\n            className={`answerBtn form-control mb-2 \r\n                ${showIndicator === true  && correctAnswerIndex === index ? \"correct\" : \"\"}\r\n                ${disabledBtns === true ? \"disabled\": \"\"}`}\r\n            type=\"button\"\r\n            onClick={() => checkAnswer(index)}\r\n        >\r\n            { text }\r\n        </button>\r\n    )\r\n}\r\n\r\nexport default AnswerBtn;","import React from \"react\";\r\nimport AnswerBtn from \"./AnswerBtn\";\r\n\r\nconst AnswerBox = ({ options, checkAnswer, correctAnswerIndex, showIndicator, disabledBtns }) => {\r\n\r\n    return (\r\n        <div className=\"form-group\">\r\n            {options.map((val, i) => \r\n                <AnswerBtn \r\n                    key={i} \r\n                    index={i} \r\n                    text={val} \r\n                    correctAnswerIndex={correctAnswerIndex} \r\n                    showIndicator={showIndicator} \r\n                    checkAnswer={checkAnswer}\r\n                    disabledBtns={disabledBtns} />\r\n            )}\r\n        </div>\r\n    )\r\n\r\n}\r\n\r\nexport default AnswerBox;","import React from \"react\";\r\n\r\nconst GameOver = ({ score, restart }) => {\r\n    return(\r\n        <div>\r\n            <h4>Your score: { score }</h4>\r\n            <button \r\n                className=\"btn btn-primary w-75 d-block mx-auto my-4\"\r\n                onClick={() => restart()}\r\n            >\r\n                Play again!\r\n            </button>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default GameOver;","import React from 'react';\nimport Header from \"./components/Header\";\nimport Question from \"./components/Question\";\nimport AnswerBox from \"./components/AnswerBox\";\nimport myJson from \"./assets/qna.json\"\nimport \"./App.scss\";\nimport { ProgressBar } from 'react-bootstrap';\nimport GameOver from './components/GameOver';\n\nclass App extends React.Component {\n\n\tconstructor(props) {\n\t\tsuper(props);\n\t\t\n\t\tthis.state = {\n\t\t\tqaList: myJson,\n\t\t\tquestion: \"\",\n\t\t\toptions: [],\n\t\t\tcorrectAnswer: \"\",\n\t\t\tshowIndicator: false,\n\t\t\tisCorrect: null,\n\t\t\tscore: 0,\n\t\t\tround: 0,\n\t\t\tprogress: 0,\n\t\t\tdisabledBtns: false\n\t\t}\n\n\t\tthis.checkAnswer = this.checkAnswer.bind(this);\n\t\tthis.restart = this.restart.bind(this);\n\t}\n\n\tcomponentDidMount() {\n\t\tthis.shuffleArray(this.state.qaList);\n\t\tthis.getQuestion();\n\t\tconsole.log(this.state.qaList);\n\t}\n\n\tcheckAnswer(answer) {\n\t\tthis.setState({ round: this.state.round + 1, disabledBtns: true }, () => {\n\t\t\tthis.setState({ progress: Math.ceil((this.state.round/this.state.qaList.length)*100) });\n\t\t\tif (answer === this.state.correctAnswerIndex) {\n\t\t\t\tthis.setState({ score: this.state.score + 1 });\n\t\t\t}\n\t\t\tthis.setState({ isCorrect: answer === this.state.correctAnswerIndex, showIndicator: true });\n\t\t\t\n\t\t\tif (this.state.round < this.state.qaList.length) {\n\t\t\t\tthis.nextQuestion();\n\t\t\t}\n\t\t});\n\t}\n\n\tnextQuestion() {\n\t\tsetTimeout(() => {\n\t\t\tthis.getQuestion();\n\t\t\tthis.setState({ isCorrect: null, showIndicator: false, disabledBtns: false });\n\t\t\tdocument.activeElement.blur();\n\t\t}, 1500);\n\t}\n\t\n\tgetQuestion() {\n\t\tthis.setState({\n\t\t\tquestion: this.state.qaList[this.state.round].question,\n\t\t\toptions: this.state.qaList[this.state.round].opt,\n\t\t\tcorrectAnswerIndex: this.state.qaList[this.state.round].correct,\n\t\t});\n\t}\n\n\tshuffleArray(array) {\n\t\tfor (let i = array.length - 1; i > 0; i--) {\n\t\t\tconst j = Math.floor(Math.random() * (i + 1));\n\t\t\t[array[i], array[j]] = [array[j], array[i]];\n\t\t}\n\t\treturn array;\n\t}\n\n\trestart() {\n\t\tthis.setState({\n\t\t\tshowIndicator: false,\n\t\t\tisCorrect: null,\n\t\t\tscore: 0,\n\t\t\tround: 0,\n\t\t\tprogress: 0,\n\t\t\tdisabledBtns: false\n\t\t});\n\t}\n\n\trender() {\n\t\treturn (\n\t\t\t<div className=\"main\">\n\t\t\t\t<Header gameOver={this.state.round === this.state.qaList.length} />\n\n\t\t\t\t{this.state.round === this.state.qaList.length ? (\n\t\t\t\t\t<GameOver score={this.state.score} restart={this.restart} />\n\t\t\t\t) : (\n\t\t\t\t\t<div>\n\t\t\t\t\t\t<Question value={this.state.question} />\n\t\t\t\t\t\t<AnswerBox \n\t\t\t\t\t\t\toptions={this.state.options} \n\t\t\t\t\t\t\tcorrectAnswerIndex={this.state.correctAnswerIndex} \n\t\t\t\t\t\t\tcheckAnswer={this.checkAnswer}\n\t\t\t\t\t\t\tshowIndicator={this.state.showIndicator}\n\t\t\t\t\t\t\tdisabledBtns={this.state.disabledBtns} />\n\t\t\t\t\t\t<ProgressBar now={this.state.progress} label={`${this.state.progress}%`} variant={this.state.progress == 100 ? \"success\": \"\"} />\n\t\t\t\t\t</div>\n\t\t\t\t)}\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}